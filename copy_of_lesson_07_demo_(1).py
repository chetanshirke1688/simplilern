# -*- coding: utf-8 -*-
"""Copy of Lesson_07_Demo (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14jnCMxMJuUBbdJhOkvETwn3sF90DfMdG

# Clasess & Objects
"""

import datetime
class Item :
    counter = 0
    '''This is class "Item" with information and functions related with items. '''
    # __init__ function
    # - Item ID (numeric)
    # - Item Name (string)
    # - Quantity Available (numeric)
    # - Price per Item (numeric)
    def __init__(self, item_name:str, quantity_available:int, price_per_item:int):
        '''
        Initialization of Item class.
        '''
        Item.counter +=1
        self.item_id = Item.counter
        self.item_name = item_name
        self.quantity_available = quantity_available
        self.price_per_item = price_per_item


    # Updates the quantity available for the item.
    def update_quantity(self, quantity):
        self.quantity_available = quantity

    #Calculates and returns the total cost of a specified quantity of the item.
    def calculate_total_cost(self):
      return self.quantity_available * self.price_per_item

class PerishableItem(Item):
    def __init__(self, item_name:str, quantity_available:int, price_per_item:int, expiry_date):
        '''
        Initialization of Item class.
        '''
        super().__init__(item_name, quantity_available, price_per_item)
        self.expiry_date=expiry_date

    def check_expiry(self):
      return datetime.datetime.now() > self.expiry_date
      #return False


class NonPerishableItem(Item):

    def __init__(self, item_name:str, quantity_available:int, price_per_item:int, weight):
        '''
        Initialization of Item class.
        '''
        super().__init__(item_name, quantity_available, price_per_item)
        self.weight = weight

    def calculate_shipping_cost(self):
      return self.weight*self.quantity_available*100


class Inventory :
    def __init__(self, inventory_items:list):
        '''
        Initialization of Inventory class.
        '''
        self.inventory_items = inventory_items

    def add_item(self, item:Item):
        self.inventory_items.append(item)

    def update_item_quantity(self, item_id, new_quantity):
      for item in self.inventory_items:
        if item.item_id == item_id:
          item.quantity_available=new_quantity

    def remove_item(self, item_id):
      for item in self.inventory_items:
        if item.item_id == item_id:
          self.inventory_items.remove(item)

    def display_inventory(self):
      print('------')
      for x in self.inventory_items:
          print(x.item_id, x.item_name, x.quantity_available)

perishableObj =  PerishableItem(item_name='battery', quantity_available=10, price_per_item=100, expiry_date=datetime.datetime.now())
nonPerishableObj =  NonPerishableItem(item_name='sunglasses', quantity_available=30, price_per_item=10, weight=33)
print(perishableObj.check_expiry())
print(perishableObj.update_quantity(10))
print(perishableObj.quantity_available)
print(nonPerishableObj.calculate_shipping_cost())
print(perishableObj.item_id)
print(nonPerishableObj.item_id)

invList = list()
invList.append(perishableObj)
invList.append(nonPerishableObj)
inv = Inventory(invList)
nonPerishableObj_1 =  NonPerishableItem(item_name='phones', quantity_available=11, price_per_item=10, weight=1)
inv.add_item(nonPerishableObj_1)
inv.display_inventory()
inv.update_item_quantity(item_id=nonPerishableObj_1.item_id, new_quantity=9)
inv.display_inventory()
inv.remove_item(item_id=nonPerishableObj_1.item_id)
inv.display_inventory()